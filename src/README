itamarleva,joshuakol
322467440,318135340

1)
    We will explain the purpose of each class and their relationships based on the packages they are in:

    ascii_art package:
        AsciiArtAlgorithm - Generates ASCII art representations of images. It uses an AsciiArtSingleton
        to maintain state and a SubImgCharMatcher instance to map brightness levels to characters.

        AsciiArtSingleton - A Singleton that manages state for the ASCII art generation process. It
        tracks the previous resolution, sub-image brightness values, previously generated ASCII art, and
        maintains records of added and removed characters for the charset.

        Shell - A command-line interface for generating ASCII art. It provides commands to manage the
        character set, resolution, and output strategy. It interacts with AsciiArtAlgorithm and other
        components to generate and display ASCII art. It holds instances of SubImgCharMatcher and
        AsciiArtSingleton (composition).

    constants package:
        Constants - Contains constant values and utility methods used throughout the ASCII art
        application. This includes default configurations, command strings, and various parameters for
        processing and validation.

    factories package:
        AsciiOutputFactory - Responsible for creating AsciiOutput instances based on the specified
        output type.

        RoundStrategyFactory - Creates RoundStrategy instances based on the specified rounding parameter.
        It contains a SubImgCharMatcher used for associating brightness values with characters and for
        constructing concrete rounding strategy classes based on desired parameters.

    image package:
        Image - A class (provided to us) that represents a 2D array of pixels.

        ImageEditor - Provides utility methods for manipulating and processing images, including padding
        images to dimensions that are powers of two, creating sub-images, and calculating brightness.

    image_char_matching package:
        SubImgCharMatcher - Manages the mapping between brightness values and characters for sub-image
        matching in ASCII art generation. We implemented a data structure that stores character brightness
        values before linear stretching. To find the closest char brightness to a given sub-image brightness,
        we first inverse the linear stretch on the sub-image brightness, then compare it to the charset.

    strategies package:
        RoundStrategy - An interface defining the contract for implementing rounding strategies in the
        ASCII art generation process. Its implementations are RoundAbsStrategy, RoundUpStrategy, and
        RoundDownStrategy.

        RoundAbsStrategy - Matches brightness values to the nearest character using absolute distance
        calculations.

        RoundUpStrategy - Matches brightness values to the nearest character by rounding up to the next
        higher brightness value.

        RoundDownStrategy - Matches brightness values to the nearest character by rounding down to the
        nearest lower brightness value.

2)
    1. TreeMap<Double, TreeSet<Character>>:
       Used in SubImgCharMatcher. Keys are double brightness values of chars. Values are TreeSet<Character>
       sets of chars mapped to those brightness values. Our implementation stores char brightness values
       before linear stretching, enabling add/remove operations in O(log^2(n)). This data structure is
       ordered, so when multiple chars share the same brightness value, we can access the lowest char
       value in O(1).

    2. HashSet<Character>:
       In AsciiArtSingleton, we maintain two synchronized HashSet<Character> sets: one for added chars and
       one for removed chars. When adding a char, if it is in the removed set, we remove it from there;
       otherwise, we add it to the 'added' charset. Similarly, for removal, we handle it in the opposite
       manner. This keeps track of changes relative to the previously run charset. If the charset and
       resolution remain unchanged before the next run, we can reuse the previous run's resultImage.

    3. TreeSet<Character>:
       In Shell, we store the charset in a TreeSet<Character> for O(log(n)) add/remove operations and
       sorted iteration. This avoids sorting a HashSet (O(nlogn)) whenever we need a sorted display.

3)
    To handle invalid user inputs, we throw IllegalArgumentException with informative messages. We added
    a static method in Constants to provide these messages. We created a BoundariesResolutionException
    class for cases where resolution exceeds max/min limits. We also throw IOException for invalid
    filename paths.

4)
    We added three public getter methods—getMinCharBrightness, getCharBrightnessMap, and
    getMaxCharBrightness—enabling strategy classes to access these fields for proper rounding strategies.
    We also added a public setter method, setRoundStrategy, allowing the shell to change the
    SubImgCharMatcher’s rounding strategy.
